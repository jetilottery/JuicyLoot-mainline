define((require) => {	const altAutoPlay = require("game/altAutoPlay");	const msgBus = require("skbJet/component/gameMsgBus/GameMsgBus");	const displayList = require("skbJet/componentManchester/standardIW/displayList");	const config = require("skbJet/componentManchester/standardIW/gameConfig");	const audio = require("skbJet/componentManchester/standardIW/audio");	const gameState = require("game/state/gameState");	const textStyles = require("skbJet/componentManchester/standardIW/textStyles");	const orientation = require("skbJet/componentManchester/standardIW/orientation");	const pressable = require("skbJet/componentManchester/standardIW/components/pressable");	require("com/gsap/TweenMax");	require("com/gsap/TimelineLite");	const Tween = window.TweenMax;	const Timeline = window.TimelineLite;	let messagePlaying = false;	let gameFinishing = false;	let fullGameAutoplayEnabled = false;	function init() {		displayList.mgrContinueButton.on("press", hideResult);		displayList.mgrContinueButton.enabled = false;		msgBus.subscribe("Game0.finish", onFinish);		msgBus.subscribe("Game0.messageStarted", onMessageStarted);		msgBus.subscribe("Game0.messageFinished", onMessageFinished);		msgBus.subscribe("UI.showHelp", onShowHelp);		msgBus.subscribe("UI.hideHelp", onHideHelp);		reset();	}	function hideStars() {		displayList.mgrScoreAmount.text = "0";		displayList.mgrStar0.alpha = 0;		displayList.shine0.alpha = 0;		displayList.burst0.alpha = 0;		displayList.mgrStar1.alpha = 0;		displayList.shine1.alpha = 0;		displayList.burst1.alpha = 0;		displayList.mgrStar2.alpha = 0;		displayList.shine2.alpha = 0;		displayList.burst2.alpha = 0;	}	function reset() {		messagePlaying = false;		gameFinishing = false;		hideStars();		displayList.midGameResult.visible = false;	}	function hideResult() {		displayList.mgrContinueButton.enabled = false;		new Timeline({			onComplete: () => {				msgBus.publish("Game1.start", {score: gameState.score, objectives: gameState.objectives});			}		})			.fromTo(displayList.mgrPlaque, 0.0834, {y: -66}, {y: -12}, 0)			.to(displayList.mgrPlaque, 0.5, {y: -704, alpha: 0, visible: false}, 0.0833)			.fromTo(displayList.mgrScoreLabel, 0.0833, {y: -9}, {y: 10}, 0.5833)			.fromTo(displayList.mgrScoreAmount, 0.0833, {y: 86}, {y: 105}, 0.5833)			.to(displayList.mgrScoreLabel, 0.5, {y: -556, alpha: 0, visible: false}, 0.6667)			.to(displayList.mgrScoreAmount, 0.5, {y: -461, alpha: 0, visible: false}, 0.6667)			.to(displayList.mgrOverlay, 0.8333, {alpha: 0}, 1.2083);		audio.play("clickClose");	}	function showResult() {		msgBus.publish("UI.forceHideHelp");		let starBursts = [displayList.burst0, displayList.burst1, displayList.burst2];		let starShines = [displayList.shine0, displayList.shine1, displayList.shine2];		//stagger is probably unnecessary but just in case animating in sync looks weird		starBursts.forEach(elem => elem.rotation = 0);		starShines.forEach(elem => elem.rotation = 0);		Tween.staggerTo(starBursts, config.RESULTS_BURST_ANIM_TIME, {			pixi: {rotation: 360},			repeat: -1,			ease: "Linear.easeNone"		}, config.RESULTS_BURST_ANIM_TIME / 3);		Tween.staggerTo(starShines, config.RESULTS_SHINE_ANIM_TIME, {			pixi: {rotation: -360},			repeat: -1,			ease: "Linear.easeNone"		}, config.RESULTS_SHINE_ANIM_TIME / 3);		fullGameAutoplayEnabled = config.fullGameAutoPlay && altAutoPlay._enabled;		displayList.mgrContinueButton.enabled = false;		msgBus.publish("UI.updateButtons", { "help": {enabled: false} });		if(audio.isPlaying("musicHurry")) {			audio.fadeOut("musicHurry", config.AUDIO_DEFAULTFADE);		} else if(audio.isPlaying("musicMain")) {			//Test for both audio tracks in case someone forces a game end early			audio.fadeOut("musicMain", config.AUDIO_DEFAULTFADE);		}		hideStars();		displayList.mgrScoreAmount.text = "0";		displayList.mgrDrinksAmount.text = gameState.objectives;		displayList.midGameResult.visible = true;		new Timeline({			onComplete: showStarRating		})			.fromTo(displayList.mgrOverlay,	0.8333,	{alpha: 0, visible: false}, {alpha: 1, visible: true}, 0)			.fromTo(				displayList.mgrPlaque,				0.2083,				{alpha: 0, visible: false, y: -606, pixi: {scaleY: 1}},				{alpha: 1, visible: true, y: 2, pixi: {scaleY: 0.937}},				0			)			.call(() => {audio.play("match3Result");}, [], this, 0.1)			.to(				displayList.mgrPlaque,				0.0834,				{y: -66, pixi: {scaleY: 1}},				0.2083			)			.fromTo(displayList.mgrDrink, 0, {visible: false}, {visible: true}, 0.3333)			.fromTo(displayList.mgrDrinksLabel, 0, {visible: false}, {visible: true}, 0.3333)			.fromTo(displayList.mgrContinueButton, 0.1667, {alpha: 0, visible: false}, {alpha: 1, visible: true}, 0.3333)			.fromTo(displayList.mgrDrinksAmount,				0.45833,				{alpha: 0, visible: false, pixi: {scaleX: 2, scaleY: 2}},				{alpha: 1, visible: true, pixi: {scaleX: 1, scaleY: 1}},				0.875			)			.fromTo(displayList.mgrScoreLabel, 0, {y: -9, alpha: 0, visible: false}, {y: -9, alpha: 1, visible: true}, 0.3333)			.fromTo(displayList.mgrScoreAmount, 0.1, {y: 86, alpha: 0, visible: false}, {y: 86, alpha: 1, visible: true}, 0.875)			.to(displayList.mgrDrink, 0.0417, {pixi: {rotation: 20}}, 0.875)			.to(displayList.mgrDrink, 0.0417, {pixi: {rotation: 20}}, 0.9167)			.to(displayList.mgrDrink, 0.0417, {pixi: {rotation: 40}}, 0.9584)			.to(displayList.mgrDrink, 0.0417, {pixi: {rotation: 20}}, 1.0001)			.to(displayList.mgrDrink, 0.0417, {pixi: {rotation: 0}}, 1.0418)			.to(displayList.mgrDrink, 0.0417, {pixi: {rotation: 0}}, 1.0835)			.to(displayList.mgrDrink, 0.0417, {pixi: {rotation: 20}}, 1.1252)			.to(displayList.mgrDrink, 0.0417, {pixi: {rotation: 40}}, 1.1669)			.to(displayList.mgrDrink, 0.0417, {pixi: {rotation: 20}}, 1.2086)			.to(displayList.mgrDrink, 0.0417, {pixi: {rotation: 0}}, 1.2503);		msgBus.publish("UI.updateButtons", {			altAutoPlay: false,			autoPlay: false,			help: {enabled: true}		});	}	//Count up the score and show star rating	function showStarRating() {		if(gameState.score >= config.HISCORE_1STAR) {			countUpToThen(config.HISCORE_1STAR, () => {				new Timeline()					.fromTo(displayList.mgrStar0, 0.2917, {alpha: 0, pixi: {scaleX: 2, scaleY: 2}}, {alpha: 1, pixi: {scaleX: 1, scaleY: 1}})					.fromTo(displayList.shine0, 0, {alpha: 0}, {alpha: 1}, 0.3)					.fromTo(displayList.burst0, 0, {alpha: 0}, {alpha: 1}, 0.3)					.call(() => {						audio.play("match3Result1Star");						if(gameState.score >= config.HISCORE_2STAR) {							countUpToThen(config.HISCORE_2STAR, () => {								audio.stop("match3ResultScoreTicker");								new Timeline()									.fromTo(displayList.mgrStar1, 0.2917, {alpha: 0, pixi: {scaleX: 2, scaleY: 2}}, {alpha: 1, pixi: {scaleX: 1, scaleY: 1}})									.fromTo(displayList.shine1, 0, {alpha: 0}, {alpha: 1}, 0.3)									.fromTo(displayList.burst1, 0, {alpha: 0}, {alpha: 1}, 0.3)									.call(() => {										audio.play("match3Result2Star");										if (gameState.score >= config.HISCORE_3STAR) {											countUpToThen(config.HISCORE_3STAR, () => {												new Timeline()													.fromTo(displayList.mgrStar2, 0.2917, {														alpha: 0,														pixi: {scaleX: 2, scaleY: 2}													}, {alpha: 1, pixi: {scaleX: 1, scaleY: 1}})													.fromTo(displayList.shine2, 0, {alpha: 0}, {alpha: 1}, 0.3)													.fromTo(displayList.burst2, 0, {alpha: 0}, {alpha: 1}, 0.3)													.call(() => {														audio.play("match3Result3Star");														countUpToThen(gameState.score, finishScoreCounter);													});											});										} else {											countUpToThen(gameState.score, finishScoreCounter);										}									});							});						} else {							countUpToThen(gameState.score, finishScoreCounter);						}					});			});		} else {			countUpToThen(gameState.score, finishScoreCounter);		}	}	function finishScoreCounter() {		audio.stop("match3ResultScoreTicker");		new Timeline({			onComplete: () => {				pressable._lock = null; //Force unlock of all buttons				displayList.mgrContinueButton.enabled = !fullGameAutoplayEnabled;				msgBus.publish("Game0.resultFinished");			}		})			.to(displayList.mgrScoreAmount, 0.1667, {pixi: {scaleX: 1.5, scaleY: 1.5}})			.to(displayList.mgrScoreAmount, 0.125, {pixi: {scaleX: 1, scaleY: 1}});		if(fullGameAutoplayEnabled) {			Tween.delayedCall(config.fullGameAutoPlayMidGameInterval, hideResult);		}	}	function countUpToThen(amount, callback) {		audio.play("match3ResultScoreTicker", true);		let diff = amount - parseInt(displayList.mgrScoreAmount.text);		Tween.to(displayList.mgrScoreAmount, diff * config.COUNT_TIME, {			ease: "Linear.easeNone",			text: amount,			roundProps: "text",			onComplete: callback,			onUpdate: function testHighScore(){				if(parseInt(displayList.mgrScoreAmount.text) > gameState.highScores[0]) {					displayList.mgrScoreAmount.style = textStyles.match3ResultAmountHigh;				} else {					displayList.mgrScoreAmount.style = textStyles.match3ResultAmount;				}			}		});	}	//Wait for message popups to complete before showing results	function onFinish() {		gameFinishing = true;		if(!messagePlaying) {			showResult();		}	}	function onMessageStarted() {		messagePlaying = true;	}	function onMessageFinished() {		messagePlaying = false;		if(gameFinishing) {			showResult();		}	}	function onShowHelp() {		displayList.mgrContinueButton.enabled = false;	}	function onHideHelp() {		displayList.mgrContinueButton.enabled = true;		msgBus.publish("GameSize.OrientationChange", orientation.get()); //Force layout update, avoids weird "0" == true issue on Tweens.	}	return {		init,		reset	};});