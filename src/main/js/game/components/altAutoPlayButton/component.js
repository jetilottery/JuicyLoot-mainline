define(function(require) {	var SKBeInstant = require("skbJet/component/SKBeInstant/SKBeInstant");	var msgBus = require("skbJet/component/gameMsgBus/GameMsgBus");	var altAutoPlay = require("game/altAutoPlay");	var gameConfig = require("skbJet/componentManchester/standardIW/gameConfig");	var gameState = require("game/state/gameState");	var pressable = require("skbJet/componentManchester/standardIW/components/pressable");	var Match3Tile = require("game/components/game0/Match3Tile");	var displayList = require("skbJet/componentManchester/standardIW/displayList");	return function altAutoPlayButtonComponent(parts) {		parts.altAutoPlayStop.visible = false;		parts.altAutoPlayStart.visible = false;		var override = SKBeInstant.config.autoRevealEnabled;		function disableOnSwap() {			parts.altAutoPlayStart.enabled = false;			msgBus.publish("UI.updateButtons", {				help: { enabled: false }			});			Match3Tile.deSelect();		}		msgBus.subscribe("Game0.swapStarted", disableOnSwap);		function enableOnTurnComplete() {			parts.altAutoPlayStart.enabled = override !== false && !altAutoPlay._enabled && gameState.moves > 0 && !displayList.howToPlayContainer.children[1].visible;			if(!altAutoPlay._enabled && gameState.moves > 0) {				msgBus.publish("UI.updateButtons", {					help: { enabled: true }				});				Match3Tile.deSelect();				pressable._lock = null; //Force unpress of tiles			}		}		msgBus.subscribe("Game0.turnComplete", enableOnTurnComplete);		msgBus.subscribe("Game0.swapFail", enableOnTurnComplete);		function updateButton(conf) {			// Bomb out if altAutoPlay is not being updated			if (conf.altAutoPlay === undefined) {				return;			}			var bConf = conf.altAutoPlay;			// Update button visibility			if (bConf === true || bConf.visible === true) {				// Button will be shown if it isn't blocked in the configured param				parts.altAutoPlayStart.visible = override !== false && !altAutoPlay._enabled;				parts.altAutoPlayStop.visible = override !== false && altAutoPlay._enabled;			} else if (bConf === false || bConf.visible === false) {				// Button will be hidden				parts.altAutoPlayStart.visible = false;				parts.altAutoPlayStop.visible = false;			}			// Enable/disable if specified			if (bConf.enabled !== undefined) {				parts.altAutoPlayStart.enabled = bConf.enabled;				parts.altAutoPlayStop.enabled = bConf.enabled;			}		}		msgBus.subscribe("UI.updateButtons", updateButton);		function toggleStart() {			if (!altAutoPlay._suspended) {				if (gameConfig.toggleAltAutoPlay) {					// If altAutoPlay can be toggled on/off switch to the stop button					parts.altAutoPlayStart.visible = false;					parts.altAutoPlayStop.visible = true;				}				//always disable the start button as we can't immediately restart autoplay on stopping				parts.altAutoPlayStart.enabled = false;				Match3Tile.deSelect();			}		}		msgBus.subscribe("Game.AltAutoPlayStart", toggleStart);		//Re-enable autoPlayStart only when a signal is received from the game		msgBus.subscribe("Game.AltAutoPlayReady", () => {			Match3Tile.deSelect();			pressable._lock = null; //Force unlock of all buttons			if(!altAutoPlay._enabled && gameState.moves > 0 && !displayList.howToPlayContainer.children[1].visible) {				parts.altAutoPlayStart.enabled = true;				console.log("---- READY SIGNAL RECEIVED -----"); //DEBUG			} else {				console.log("---- READY SIGNAL REJECTED -----"); //DEBUG				console.log("altAutoPlay: " + altAutoPlay._enabled);				console.log("moves: " + gameState.moves);			}		});		function toggleStop() {			// altAutoPlay can only be toggled off if configured to use toggleable altAutoPlay			if (!altAutoPlay._suspended && gameConfig.toggleAltAutoPlay) {				parts.altAutoPlayStop.visible = false;				parts.altAutoPlayStart.visible = true;				Match3Tile.deSelect();			}		}		msgBus.subscribe("Game.AltAutoPlayStop", toggleStop);		parts.altAutoPlayStart.on("press", function onStartButton() {			Match3Tile.deSelect();			altAutoPlay._enabled = true;			msgBus.publish("UI.updateButtons", {				help: { enabled: false }			});		});		parts.altAutoPlayStop.on("press", function onStopButton() {			Match3Tile.deSelect();			altAutoPlay._enabled = false;			msgBus.publish("UI.updateButtons", {				help: { enabled: true }			});		});		return parts.container;	};});