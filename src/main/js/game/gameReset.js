define(function(require) {	const msgBus = require("skbJet/component/gameMsgBus/GameMsgBus");	const gameFlow = require("skbJet/componentManchester/standardIW/gameFlow");	const gameState = require("game/state/gameState");	const game0board = require("game/components/game0/match3Board");	const game0scores = require("game/components/game0/match3Scores");	const game0result = require("game/components/game0/match3Result");	const game1 = require("game/components/game1/instantWinBoard");	const winUpTo = require("game/components/winUpTo");	const audio = require("skbJet/componentManchester/standardIW/audio");	const displayList = require("skbJet/componentManchester/standardIW/displayList");	const gameController = require("game/gameController");		const config = require("skbJet/componentManchester/standardIW/gameConfig");	const orientation = require("skbJet/componentManchester/standardIW/orientation");	require("com/gsap/TimelineLite");	const Timeline = window.TimelineLite;	require("com/gsap/TweenMax");	const Tween = window.TweenMax;	function gameReset() {		//Tween back to original game view		let l = orientation.get() === "landscape";		msgBus.publish("UI.updateButtons", {			autoPlay: false,			altAutoPlay: false,			playAgain: false,			tryAgain: false		});		new Timeline({			onComplete: () => {				gameState.reset();				game0board.reset();				game0scores.reset();				game0result.reset();				game1.reset();				winUpTo.reset();				gameController.updateHighScores();				Tween.killAll(); // Clean up any rogue unfinished tweens/timelines from the last game.								msgBus.publish("Game.setTruckSpeed", {speed: config.TRUCK_SPEED});				if(audio.isPlaying("ambience")) {					audio.fadeOut("ambience", config.TRUCK_SPEED / config.TRUCK_ACCELERATION);				}				gameFlow.next("BUY_SCREEN");				//Force another orientation check at end of animation in case a user flips the phone during the sequence.				msgBus.publish("GameSize.OrientationChange", orientation.get());			}		})			.to(displayList.winPlaqueEffects, 0.5, {alpha: 0}, 0)			.to(displayList.meterBar, 0.625, {y: 0, alpha: 0, ease: "Back.easeOut.config(2)"}, 0)			.to(displayList.game1Tagline, 0.625, {y: 0, alpha: 0, ease: "Back.easeOut.config(2)"}, 0)			.to(displayList.logoSmall, 0.625, {y: 0, alpha: 0, ease: "Back.easeOut.config(2)"}, 0)			.to(displayList.game1Shadow, 0.625, {alpha: 0, ease: "Linear.easeNone"}, 0.5)			.to(displayList.background, 0.83333, {y: 0, ease: "Linear.easeNone"}, 0.625)			.to(displayList.cityParallax0, 0.83333, {y: l ? 200 : 160, ease: "Linear.easeNone"}, 0.625)			.to(displayList.cityParallax1, 0.83333, {y: l ? 240 : 240, ease: "Linear.easeNone"}, 0.625)			.to(displayList.cityParallax2, 0.83333, {y: l ? 250 : 230, ease: "Linear.easeNone"}, 0.625)			.to(displayList.game1, 0.83333, {x: l ? 388 : 28, y: l ? 1090 : 1810, alpha: 0, visible: false, ease: "Back.easeIn.config(2)"}, 0.625)			.to(displayList.logoLarge, 0.3, {alpha: 1, visible: true, ease: "Linear.easeNone"})			.to(displayList.highScores, 0.3, {alpha: 1, visible: gameState.highScores.length ? 1 : 0, ease: "Linear.easeNone"}, "-=0.3")			.fromTo(				displayList.winUpTo,				0.3,				{alpha: 0, visible: false, x: l ? 960 : 600, y: l ? 464 : 1090, pixi: {scaleX: 1, scaleY: 1}},				{alpha: 1, visible: true, ease: "Linear.easeNone"}			);		// Fade out any sounds from the result plaque that may still be playing		if(audio.isPlaying("bonusResultWin")) { audio.fadeOut("bonusResultWin", config.AUDIO_DEFAULTFADE);	}		if(audio.isPlaying("bonusResultNoWin")) { audio.fadeOut("bonusResultNoWin", config.AUDIO_DEFAULTFADE);	}		audio.fadeIn("musicBonus", config.AUDIO_DEFAULTFADE, true);	}	gameFlow.handle(gameReset, "GAME_RESET");});